<div class="row">
  <div class="col-md-12">
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h2>Agentforce Chat</h2>
        <button id="endChat" class="btn btn-outline-danger" style="display: none;">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-circle me-1" viewBox="0 0 16 16">
            <path d="M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 1 8 0a8 8 0 0 1 0 16z"/>
            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
          </svg>
          End Chat
        </button>
      </div>
      <div class="card-body">
        <div id="chatContainer" class="mb-3 position-relative" style="height: 400px; overflow-y: auto;">
          <div id="messages" class="d-flex flex-column"></div>
          <!-- Spinner overlay -->
          <div id="spinnerOverlay" class="position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center bg-white bg-opacity-75" style="display: none; z-index: 10;">
            <div class="d-flex flex-column align-items-center">
              <div class="spinner-border text-primary mb-2" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Loading...</span>
              </div>
              <span class="fw-bold text-primary">Agentforce is thinking...</span>
            </div>
          </div>
        </div>
        
        <form id="chatForm">
          <div class="input-group">
            <input type="text" id="messageInput" class="form-control" placeholder="Type your message..." disabled>
            <button type="submit" class="btn btn-primary" disabled>Send</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Favicon for Agentforce (ensure /images/agentforce-favicon.svg exists) -->

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const chatForm = document.getElementById('chatForm');
    const messageInput = document.getElementById('messageInput');
    const messagesDiv = document.getElementById('messages');
    const endChatBtn = document.getElementById('endChat');
    const spinnerOverlay = document.getElementById('spinnerOverlay');
    // Ensure spinner is always hidden on initial page load (in case of reload or navigation)
    spinnerOverlay.style.display = 'none';
    let currentSessionId = null;
    const userId = 'user-' + Date.now(); // Generate a temporary user ID

    function showSpinner() {
      spinnerOverlay.style.display = 'flex';
      // Disable all inputs while spinner is active
      messageInput.disabled = true;
      chatForm.querySelector('button').disabled = true;
      endChatBtn.disabled = true;
    }
    function hideSpinner() {
      spinnerOverlay.style.setProperty('display', 'none', 'important');

      // Enable/disable based on session state
      if (currentSessionId) {
        messageInput.disabled = false;
        chatForm.querySelector('button').disabled = false;
        endChatBtn.disabled = false;
      } else {
        messageInput.disabled = true;
        chatForm.querySelector('button').disabled = true;
        endChatBtn.disabled = true;
      }
    }

    // Start chat session
    async function startChat() {
      showSpinner();
      try {
        const response = await fetch('/api/conversation/start', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ userId })
        });
        const data = await response.json();
        currentSessionId = data.sessionId;
        if (data.messages && data.messages[0]) {
          addMessage(data.messages[0].message, 'agent');
        }
      } catch (error) {
        console.error('Error starting chat:', error);
        addMessage('Error starting chat session', 'error');
      } finally {
        hideSpinner();
      }
    }

    // Add message to chat
    function addMessage(text, sender) {
      const msgDiv = document.createElement('div');
      msgDiv.className = `chat-message ${sender} mb-2 p-2 ${sender === 'user' ? 'align-self-end bg-primary text-white' : sender === 'agent' ? 'align-self-start bg-light' : 'align-self-center text-muted'}`;
      msgDiv.style.maxWidth = '75%';
      msgDiv.style.borderRadius = '10px';
      msgDiv.textContent = text;
      messagesDiv.appendChild(msgDiv);
      messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    // Handle message submission
    chatForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      const message = messageInput.value.trim();
      if (!message || !currentSessionId) return;
      messageInput.value = '';
      addMessage(message, 'user');
      showSpinner();
      try {
        const response = await fetch('/api/conversation/message', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            sessionId: currentSessionId,
            message
          })
        });
        const data = await response.json();
        if (data.messages && data.messages[0]) {
          addMessage(data.messages[0].message, 'agent');
        }
      } catch (error) {
        console.error('Error sending message:', error);
        addMessage('Error sending message', 'error');
      } finally {
        hideSpinner();
      }
    });

    // Handle end chat
    endChatBtn.addEventListener('click', async function() {
      if (!currentSessionId) return;
      showSpinner();
      try {
        const response = await fetch('/api/conversation/end', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            sessionId: currentSessionId
          })
        });
        const data = await response.json();
        // Disable chat interface
        messageInput.disabled = true;
        chatForm.querySelector('button').disabled = true;
        endChatBtn.disabled = true;
        addMessage('Chat session ended. Thank you for using Agentforce!', 'system');
        currentSessionId = null;
      } catch (error) {
        console.error('Error ending chat:', error);
        addMessage('Error ending chat session', 'error');
      } finally {
        hideSpinner();
      }
    });

    // Start chat session when page loads
    startChat();
  });
</script>

<style>
  .chat-message {
    word-break: break-word;
  }
  #spinnerOverlay {
    background: rgba(255,255,255,0.8);
    z-index: 10;
  }
  .chat-message.agent {
    background: #f6f9fc;
    color: #222;
    border: 1px solid #e3e3e3;
  }
  .chat-message.user {
    background: #0d6efd;
    color: #fff;
  }
  .chat-message.system {
    color: #6c757d;
    text-align: center;
    font-style: italic;
  }
  .chat-message.error {
    color: #dc3545;
    text-align: center;
    font-style: italic;
  }
  #chatContainer {
    border-radius: 12px;
    box-shadow: 0 2px 12px rgba(0,0,0,0.04);
    background: #fff;
  }
  .card-header {
    background: linear-gradient(90deg, #0d6efd 0%, #4f8cff 100%);
    color: #fff;
    border-top-left-radius: 12px;
    border-top-right-radius: 12px;
    font-weight: 600;
    letter-spacing: 0.5px;
  }
  .card {
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 2px 16px rgba(0,0,0,0.07);
  }
</style>